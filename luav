#!/bin/bash

# luav - Lua version manager
# Required: coreutils(cat type cd rm ln fmt sort) grep
# Optional:
#   sudo apt [installing any missing packages]
#   wget tar [any downloading/unpacking]
#   find libreadline-dev [install lua]
#   liblua5.3-dev liblua5.2-dev liblua5.1-dev [install luajit]

Ver=0.16 Luav_dir="$HOME/.luav"  # Directory tree for luav

Usage(){
	cat <<-EOT
		luav-$Ver - Lua version manager
		Usage:  luav [<command> [<component>[-<version>]]]
		            <component>:  lua | [lua]rocks | [lua]jit
		            <version>:    n.n[.n[n]][b[n]] (n:0-9, b:'-beta')
		            <command>:    all | list | current [<component>]
		                          install | use | uninstall <component>-<version>
		                          version | help
		    luav install | use | uninstall <component>-<version>
		      - Install / Use / Uninstall the given version of lua/luarocks/luajit
		    luav all | list | current  [lua | [lua]rocks | [lua]jit]
		      - List Known / Installed / Current versions of lua/luarocks/luajit
		    luav version    - Display luav version
		    luav help       - Display this help text
		    luav            - Interactive shell
		
		Examples:
		    luav install lua-5.3.5         Install latest version of lua 5.3
		    luav install lua-5.2.4         Install latest version of lua 5.2
		    luav install lua-5.1.5         Install latest version of lua 5.1
		    luav install luarocks-3.0.4    Install latest luarocks version
		    luav install luajit-2.0.5      Install latest luajit version
	EOT
}

Error(){ echo -e "$Bold$Red$1$Normal" 1>&2; exit 1;}
Print(){ echo -e "$Bold$1$Normal";}
Exists(){ type "$1" &>/dev/null || Error "'$1' must be usable";}
Exec_command(){ eval $1; (($?)) && Error "ABORT: error in executing '$1'";}

Download(){ # $1:url
	Print "Downloading from $1"
	Exists wget
	Exec_command "wget -q '$1'"
	Print "Download successful"
}

Unpack(){ # $1:archive
	Print "Unpacking $1"
	Exists tar
	Exec_command "tar xf '$1'"
	Print "Unpack successful"
}

Download_unpack(){ # $1:name $2:archive $3:url
	if [[ -e $1 ]]
	then
		read -rn1 -p "'$1' already downloaded, download anew? [y/N] "
		[[ $REPLY ]] && echo
		[[ $REPLY =~ [yY] ]] && Exec_command "rm -r '$1'"
	fi
	if [[ ! -e $1 ]]
	then # Downloading the archive only if it does not exist
		Print "Downloading $1"
		Download "$3/$2"
		Print "Extracting $2"
		Unpack "$2"
		Exec_command "rm '$2'"
	fi
}

Uninstall(){ # $1:name $2:path $3:dir
	Print "Uninstalling $1"
	Exec_command "cd '$2'"
	[[ -e $3 ]] || Error "$1 not installed"
	Exec_command "rm -r '$3'"
	Print "Successfully uninstalled $1"
}

Get_arch(){
	local arch=$(uname -s)
	Print "Detecting architecture"
	case "$arch" in
		Linux) Arch=linux ;;
		FreeBSD) Arch=freebsd ;;
		*BSD*) Arch=bsd ;;
		CYGWIN*|MINGW*|MSYS*) Arch=mingw ;;
		AIX) Arch=aix ;;
		SunOS) Arch=solaris ;;
		*) Arch=posix
			Print "Unknown architecture $arch, using 'posix'"
	esac
}

Get_lua_ver(){
	local ver=$(readlink "$Bin_dir/lua")
	ver=${ver#$Lua_dir/} Lua_ver=${ver%/bin/lua}
	Lua_sver=${Lua_ver:0:3}
}

Get_rocks_ver(){
	local ver=$(readlink "$Bin_dir/luarocks")
	ver=${ver#$Rocks_dir/} ver=${ver%/bin/luarocks}
	Rocks_ver=${ver%_*}
	Lua_rver=${ver#*_}
}

Get_jit_ver(){
	local ver=$(readlink "$Bin_dir/luajit")
	ver=${ver#$Jit_dir/} Jit_ver=${ver%/bin/luajit}
}

Do_list_lua(){
	local vers=$(ls -1 $Lua_dir) ver
	[[ -z $vers ]] && Print "No lua versions installed" && return
	Get_lua_ver
	for ver in $vers
	do
		[[ $ver = $Lua_ver ]] &&
			Print "${C}lua-$ver$X" ||
			Print "${I}lua-$ver$X"
	done
}

Do_list_rocks(){
	local vers=$(ls -1 $Rocks_dir) ver rocks lua
	[[ -z $vers ]] && Print "No luarocks versions installed" && return
	Get_rocks_ver
	for ver in $vers
	do
		rocks=${ver%_*} lua=${ver#*_}
		[[ $rocks = $Rocks_ver && $lua = $Lua_rver ]] &&
			Print "${C}luarocks-$rocks (lua version: $lua)$X" ||
			Print "${I}luarocks-$rocks (lua version: $lua)$X"
	done
}

Do_list_jit(){
	local vers=$(ls -1 $Jit_dir) ver
	[[ -z $vers ]] && Print "No LuaJIT versions installed" &&
		return
	Get_jit_ver
	for ver in $vers
	do
		[[ $ver = $Jit_ver ]] &&
			Print "${C}LuaJIT-$ver$X" ||
			Print "${I}LuaJIT-$ver$X"
	done
}

Do_current_lua(){
	Get_lua_ver
	[[ $Lua_ver ]] && Print "lua-$Lua_ver" ||
		Print "No lua versions installed"
}

Do_current_rocks(){
	Get_rocks_ver
	[[ $Rocks_ver ]] && Print "luarocks-$Rocks_ver" ||
		 Print "No luarocks versions installed"
}

Do_current_jit(){
	Get_jit_ver
	[[ $Jit_ver ]] && Print "LuaJIT-$Jit_ver" ||
		 Print "No LuaJIT versions installed"
}

Do_all_lua(){
	local f d=$(ls -a $Lua_dir)
	if [[ -z $Lua_a ]]
	then
		Exists wget
		f=($(wget -qO- "$Urllua" |grep -o 'lua-[.0-9]*tar\.gz' |sort -Vu))
		f=(${f[@]#lua-})
		Lua_a=${f[@]%\.tar\.gz}
	fi
	Print "All known installable lua verions:"
	#fmt <<<${Lua_a// /  }
	d=" $(echo $d) "
	Get_lua_ver
	Lua_f=
	for f in $Lua_a
	do if [[ $d == *' '$f' '* ]]
		then
			[[ $f = $Lua_ver ]] && Lua_f+="$C$f$X  " || Lua_f+="$I$f$X  "
		elif ((${f:0:1}${f:2:1}>=51))
		then
			Lua_f+="$U$f$X  "
		fi
	done
	echo -e "$Lua_f" |fmt -w 160
}

Do_all_rocks(){
	local f d=$(ls -1 $Rocks_dir)
	if [[ -z $Rocks_a ]]
	then
		Exists wget
		f=($(wget -qO- "$Urlrocks" |grep -o 'luarocks-[.0-9]*tar\.gz' |sort -Vu))
		f=(${f[@]#luarocks-}) Rocks_a=${f[@]%\.tar\.gz}
	fi
	Print "All known installable luarocks versions:"
	d=" $(echo $d) "
	Get_rocks_ver
	Rocks_f=
	for f in $Rocks_a
	do if [[ $d == *' '${f}_?.?' '* ]]
		then
			[[ $f = $Rocks_ver ]] && Rocks_f+="$C$f$X  " || Rocks_f+="$O$I$f$X  "
		elif ((${f:0:1}${f:2:1}>=22))
		then
			Rocks_f+="$U$f$X  "
	 	fi
	done
	echo "$Rocks_f" |fmt -w 160
}

Do_all_jit(){
	local f d=$(ls -1 $Jit_dir)
	if [[ -z $Jit_a ]]
	then
		Exists wget
		f=($(wget -qO- "$Urljit.html" |grep -o 'LuaJIT[^ ]*\.tar\.gz$' |sort -Vu))
		f=(${f[@]#LuaJIT-})
		Jit_a=${f[@]%\.tar\.gz}
	fi
	Print "All known installable LuaJIT versions:"
	d=" $(echo $d) "
	Get_jit_ver
	Jit_f=
	for f in $Jit_a
	do if [[ $d == *' '$f' '* ]]
		then
			[[ $f = $Jit_ver ]] && Jit_f+="$C$f$X  " || Jit_f+="$I$f$X  "
		elif ((${f:0:1}>=2))
		then
			Jit_f+="$U$f$X  "
		fi
	done
	echo "$Jit_f" |fmt -w 160
#	fmt <<<${Jit_a// /  }
}

Do_install_lua(){ # $1:version $2:use-question
	local name="lua-$1"
	((${1:0:1}${1:2:1}<51)) && Error "$name too old to autobuild"
	[[ $Lua_a ]] || Do_all_lua >/dev/null
	[[ ' '$Lua_a' ' == *' '$1' '* ]] || Error "$name is not available"
	Print "Installing $name"
	! find /usr/include |grep -q readline/readline.h &&
		if type -p apt &>/dev/null
		then sudo apt install libreadline-dev
		else Error "Missing 'readline/readline.h', install package libreadline-dev"
		fi
	Exec_command "cd '$Src_dir'"
	Download_unpack "$name" "$name.tar.gz" "$Urllua"
	Get_arch
	Exec_command "cd '$name'"
	Print "Compiling $name"
	Exec_command "make $Arch install INSTALL_TOP=$Lua_dir/$1/"
	[[ $2 ]] && return
	read -rn1 -p "$name successfully installed. Use this version? [Y/n] "
	[[ $REPLY ]] && echo
	[[ $REPLY =~ ^[nN]$ ]] || Do_use_lua $1
}

Do_install_rocks(){ # $1:version $2:use-question
	local name="luarocks-$1"
	((${1:0:1}${1:2:1}<22)) && Error "$name too old to autobuild"
	[[ $Rocks_a ]] || Do_all_rocks >/dev/null
	[[ ' '$Rocks_a' ' == *' '$1' '* ]] || Error "$name not available"
	Get_lua_ver
	[[ $Lua_ver ]] || Error "No lua version set, install lua first"
	Print "Installing $name for lua $Lua_sver"
	Exec_command "cd '$Src_dir'"
	mkdir -p "$Inc_dir"
	[[ ! -e "$Inc_dir/lua$Lua_sver" ]] &&
		! ln -sf "/usr/include/lua$Lua_sver" "$Inc_dir/" &&
		Error "Can't link the header files of Lua $Lua_sver"
	Download_unpack "$name" "$name.tar.gz" "$Urlrocks"
	Exec_command "cd '$name'"
	Print "Compiling $name"
	Exec_command "./configure --prefix=$Rocks_dir/$1_$Lua_sver
			--with-lua=$Lua_dir/$Lua_ver
			--with-lua-bin=$Lua_dir/$Lua_ver/bin
			--with-lua-include=$Lua_dir/$Lua_ver/include
			--with-lua-lib=$Lua_dir/$Lua_ver/lib
			--versioned-rocks-dir"
	Exec_command "make build"
	Exec_command "make install"
	[[ $2 ]] && return
	read -rn1 -p "$name successfully installed. Use this version? [Y/n] "
	[[ $REPLY ]] && echo
	[[ $REPLY =~ ^[nN]$ ]] || Do_use_rocks $1
}

Do_install_jit(){ # $1:version $2:use-question
	local name="LuaJIT-$1"
	((${1:0:1}<2)) && Error "$name too old to autobuild"
	[[ $Jit_a ]] || Do_all_jit >/dev/null
	[[ ' '$Jit_a' ' == *' '$1' '* ]] || Error "$name is not available"
	Print "Installing $name"
	Exec_command "cd '$Src_dir'"
	Download_unpack "$name" "$name.tar.gz" "$Urljit"
	Exec_command "cd '$name'"
	Print "Compiling $name (needs package liblua${1:2:3}-dev!)"
	Get_arch
	Exec_command "make PREFIX='$Jit_dir/$1'"
	Exec_command "make install PREFIX='$Jit_dir/$1'"
	Exec_command "cd '$Jit_dir/$1/bin'"
	[[ -f luajit ]] || Exec_command "ln -sf 'luajit-$1' '$Jit_dir/$1/bin/luajit'"
	[[ $2 ]] && return
	read -rn1 -p "$name successfully installed. Use this version? [Y/n] "
	[[ $REPLY ]] && echo
	[[ $REPLY =~ ^[nN]$ ]] || Do_use_jit $1
}

Do_use_lua(){ # $1:version
	local name="lua-$1"
	Print "Starting to use $name"
	Exec_command "cd $Lua_dir"
	if [[ ! -e $1 ]]
	then
		read -rn1 -p "$name is not installed. Install? [Y/n] "
		[[ $REPLY ]] && echo
		[[ $REPLY =~ ^[nN]$ ]] && Print "Unable to use $name, not installed" &&
			return
		Do_install_lua $1 skip
	fi
	Exec_command "cd '$Bin_dir'"
	[[ -L lua ]] && Exec_command "rm lua"
	[[ -L luac ]] && Exec_command "rm luac"
	Exec_command "ln -s '$Lua_dir/$1/bin/lua'"
	Exec_command "ln -s '$Lua_dir/$1/bin/luac'"
	Print "Successfully using $name now"

	if [[ -L luarocks ]]
	then # Check if lua version of luarocks matches
		Get_lua_ver
		Get_rocks_ver
		if [[ ! $Lua_sver = $Lua_rver ]]
		then
			Print "Current version of luarocks does not match current lua version"
			Exec_command "rm luarocks"
			Exec_command "rm luarocks-admin"
			Do_use_rocks $Rocks_ver
		fi
	fi
}

Do_use_rocks(){ # $1:version
	local name="luarocks-$1"
	Get_lua_ver
	Print "Using $name with lua $Lua_sver"
	Exec_command "cd '$Rocks_dir'"
	if [[ ! -e $1_$Lua_sver ]]
	then
		read -rn1 -p "'$name' not installed with lua $Lua_sver. Install? [Y/n] "
		[[ $REPLY ]] && echo
		[[ $REPLY =~ ^[nN]$ ]] && Print "Can't use $name, not installed" &&
			return
		Do_install_rocks $1 skip
	fi
	Exec_command "cd '$Bin_dir'"
	[[ -L luarocks ]] && Exec_command "rm luarocks"
	[[ -L luarocks-admin ]] && Exec_command "rm luarocks-admin"
	Exec_command "ln -s '$Rocks_dir/$1_$Lua_sver/bin/luarocks'"
	Exec_command "ln -s '$Rocks_dir/$1_$Lua_sver/bin/luarocks-admin'"
	Print "Successfully using $name now"
}

Do_use_jit(){ # $1:version
	local name="LuaJIT-$1"
	Print "Using $name"
	Exec_command "cd '$Jit_dir'"
	if [[ ! -e $1 ]]
	then
		read -rn1 -p "LuaJIT '$name' not installed. Install? [Y/n] "
		[[ $REPLY ]] && echo
		[[ $REPLY =~ ^[nN]$ ]] && Print "Can't use $name, not installed" &&
			return
		Do_install_jit $1 skip
	fi
	Exec_command "cd '$Bin_dir'"
	[[ -L luajit ]] && Exec_command "rm luajit"
	Exec_command "ln -s '$Jit_dir/$1/bin/luajit'"
	Print "Successfully using $name now"
}

Do_uninstall_lua(){ # $1:version
	local name="lua-$1"
	Get_lua_ver
	Uninstall "$name" "$Lua_dir" "$Lua_ver"
	if [[ $1 = $Lua_ver ]]
	then
		Exec_command "cd '$Bin_dir'"
		Exec_command "rm lua"
		Exec_command "rm luac"
	fi
}

Do_uninstall_rocks(){ # $1:version (either rocks or rocks_shortlua)
	local name="luarocks-$1" rver lver
	Get_lua_ver
	Get_rocks_ver
	if [[ $1 == *_* ]]
	then
		rver=${1%_*} lver=${1##*_}
	else
		rver=$1 lver=$Lua_sver
	fi
	Print "Uninstalling $name for lua $lver"
	Uninstall "$name" "$Rocks_dir" "${rver}_$lver"
	if [[ $rver = $Rocks_ver ]]
	then
		Exec_command "cd '$Bin_dir'"
		Exec_command "rm luarocks"
		Exec_command "rm luarocks-admin"
	fi
}

Do_uninstall_jit(){ # $1:version
	local name="LuaJIT-$1"
	Get_jit_ver
	Uninstall "$name" "$Jit_dir" "$1"
	if [[ $1 = $Jit_ver ]]
	then
		Exec_command "cd '$Bin_dir'"
		Exec_command "rm luajit"
	fi
}

# Globals
Arch= Lua_ver= Lua_sver= Lua_rver= Jit_ver= Rocks_ver= Lua_a= Jit_a= Rocks_a=
Red=$'\e[31m' Green=$'\e[32m' Underline=$'\e[4m' Bold=$'\e[1m' Normal=$'\e[0m'
C=$Bold$Underline I=$Bold$Green U=$Bold$Red X=$Normal

# Download urls
Urllua='http://www.lua.org/ftp'
Urljit='http://luajit.org/download'
Urlrocks='http://luarocks.org/releases'

# Directory tree
Src_dir="$Luav_dir/src"  # Source code dir
Bin_dir="$Luav_dir/bin"  # Bin_dirary/link dir
Lua_dir="$Luav_dir/lua"  # Build dir for lua
Rocks_dir="$Luav_dir/luarocks"  # Build dir for luarocks
Jit_dir="$Luav_dir/luajit"  # Build dir for luajit
Inc_dir="$Luav_dir/include"  # Inc_dirlude dir
mkdir -p "$Src_dir" "$Lua_dir" "$Jit_dir" "$Rocks_dir" "$Bin_dir"

case $1 in
	install|use|uninstall) [[ $2 ]] ||
			Error "Missing argument: lua|[lua]rocks|[lua]jit-<version>"
		declare -l c=${2%%-*}
		[[ $c = lua || $c = luarocks || $c = luajit || $c = rocks || $c = jit ]] ||
			Error "Argument '$2' must start with lua- / [lua]rocks- / [lua]jit-"
		[[ $c = luarocks ]] && c=rocks
		[[ $c = luajit ]] && c=jit
		n=${2#*-}
		egrep '^[0-9]\.[0-9](\.[0-9][0-9]?(-beta[0-9][0-9]?)?)?$' <<<"$n" ||
			Error "Argument '$2' must end in '-n.n[.n[n][bn[n]]]' (n:0-9, b:'-beta')"
		Do_$1_$c "$n" ;;
	all|list|current) [[ -z $2 || $2 = lua || $2 = luarocks || $2 = luajit || \
				$2 = rocks || $2 = jit ]] ||
			Error "Argument '$2' must be empty or: lua / [lua]rocks / [lua]jit"
		c=$2
		[[ $c = luarocks ]] && c=rocks
		[[ $c = luajit ]] && c=jit
		if [[ $c ]]
		then Do_$1_$c
		else
			Do_$1_lua
			Do_$1_rocks
			Do_$1_jit
		fi ;;
	version) echo "luav-$Ver" ;;
	help) Usage ;;
	'') PS3='luav> '
		Do_list_lua; Do_list_rocks; Do_list_jit
		while :
		do
			Print "Command:"
			c=exit
			select c in install use uninstall list all current version help exit
			do break; done
			case $c in
				'') continue ;;
				exit) exit ;;
				version) Print "luav-$Ver\n" ;;
				help) Usage ;;
				current) Do_current_lua; Do_current_rocks; Do_current_jit ;;
				all) Do_all_lua; Do_all_rocks; Do_all_jit ;;
				list) Do_list_lua; Do_list_rocks; Do_list_jit ;;
				*) while :
					do
						Print "Command: $c  Package:"
						p=back
						select p in Lua luarocks LuaJIT back exit
						do break; done
						vers=
						case $p in
							exit) exit ;;
							back) break ;;
							Lua) s=lua
								[[ ! $c = uninstall ]] &&
									Do_all_lua >/dev/null && vers=$Lua_f ||
									vers=$(ls -1 $Lua_dir) ;;
							luarocks) s=rocks
								[[ ! $c = uninstall ]] &&
									Do_all_rocks >/dev/null && vers=$Rocks_f ||
									vers=$(ls -1 $Rocks_dir) ;;
							LuaJIT) s=jit
								[[ ! $c = uninstall ]] &&
									Do_all_jit >/dev/null && vers=$Jit_f ||
									vers=$(ls -1 $Jit_dir) ;;
							*) continue
						esac
						while :
						do Print "Command: $c  Package: $p  Version:"
							v=back
							select v in $vers back exit
							do break; done
							[[ -z $v ]] && continue
							[[ $v = exit ]] && exit
							[[ $v = back ]] && break
							#ver=${v#$Bold ver=${ver%$Normal}
							#ver=${ver#$Red}} ver=${ver#$Underline}
							Do_${c}_$s $(sed 's/\x1b\[[0-9;]*m//g' <<<$v)
							break 2
						done
					done
				esac
		done ;;
	*) Usage
		Error "Unknown first argument: $1"
esac

exit 0
